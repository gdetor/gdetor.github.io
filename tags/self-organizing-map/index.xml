<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Self-Organizing Map on GID</title>
    <link>https://gdetor.github.io/tags/self-organizing-map/</link>
    <description>Recent content in Self-Organizing Map on GID</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2024, Georgios Is. Detorakis.</copyright>
    <lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://gdetor.github.io/tags/self-organizing-map/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An introduction to self-organizing maps</title>
      <link>https://gdetor.github.io/posts/som/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://gdetor.github.io/posts/som/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xA;&lt;p&gt;This post presents the classical self-organizing map algorithm proposed by Grossberg [1] and Teuvo Kohonen [2]. We explain the algorithm&amp;rsquo;s fundamental aspects and applications and offer a basic implementation in Pytorch.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Let us begin with a prevalent problem in science. We often have to deal with&#xA;data that &lt;em&gt;live&lt;/em&gt; in a high-dimensional space $\mathcal{X} \in \mathbb{R}^k$.&#xA;When $k &amp;gt; 3$, things get rough for people who need help to visualize&#xA;what&amp;rsquo;s happening. Moreover, many algorithms cannot operate fast&#xA;enough in high-dimensional spaces [3, 4]. Therefore, we rely on methods&#xA;that reduce the dimensionality without compromising or losing much information.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
