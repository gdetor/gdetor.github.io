<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math and python on GID Webpage</title>
    <link>https://gdetor.github.io/tags/math-and-python/</link>
    <description>Recent content in math and python on GID Webpage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>â“’  GID, 2021-2022</copyright>
    <lastBuildDate>Wed, 16 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://gdetor.github.io/tags/math-and-python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple mathematical tricks in Python</title>
      <link>https://gdetor.github.io/posts/math_tips/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gdetor.github.io/posts/math_tips/</guid>
      <description>In this post, you can find some helpful mathematical tips and tricks in the Python programming language.
Linear separability Two sets $ A $ and $ B $ in an $ n $ dimensional Euclidean space are linear separable if there exist $ n + 1 $ numbers $ w_i \in \mathbb{R} $ such that every point $ a \in A $ satisfies
$$ \sum_{i=1}^{n}w_i a_i &amp;gt; k, $$
and every point $ b \in B $ satisfies</description>
      <content>&lt;p&gt;In this post, you can find some helpful mathematical tips and tricks
in the Python programming language.&lt;/p&gt;
&lt;h2 id=&#34;linear-separability&#34;&gt;Linear separability&lt;/h2&gt;
&lt;p&gt;Two sets $ A $ and $ B $ in an $ n $ dimensional Euclidean space are linear
separable if there exist $ n + 1 $ numbers $ w_i \in \mathbb{R} $ such that
every point $ a \in A $ satisfies&lt;/p&gt;
&lt;p&gt;$$ \sum_{i=1}^{n}w_i a_i &amp;gt; k,  $$&lt;/p&gt;
&lt;p&gt;and every point $ b \in B $ satisfies&lt;/p&gt;
&lt;p&gt;$$ \sum_{i=1}^{n}w_i b_i &amp;lt; k,  $$&lt;/p&gt;
&lt;p&gt;where $ k \in \mathbb{R} $ defines a linear border (&lt;em&gt;e.g.,&lt;/em&gt; a line) between
data points of the two sets.&lt;/p&gt;
&lt;p&gt;In layperson&amp;rsquo;s terms, let&amp;rsquo;s say we have two two-dimensional data sets (&lt;em&gt;e.g.&lt;/em&gt;,
each data point is described by two coordinates, x and y). These two sets are
linearly separable if we can draw at least one line that will separate the
points of set A from those of set B.&lt;/p&gt;
&lt;p&gt;Many times we have to solve a classification or clustering problem. If we
could know &lt;em&gt;a priori&lt;/em&gt; if the involved sets are linearly separable, we could
choose the appropriate classification algorithm. For instance, if the data
sets are not linearly separable, we won&amp;rsquo;t be able to use a linear classifier.&lt;/p&gt;
&lt;p&gt;Therefore, one way to know if the sets at hand are linear separable is to
compute the convex hull of each set and check if those convex hulls intersect
or one contains the other, or they overlap. If any of those three conditions
is true, then we know that the two sets are &lt;strong&gt;not&lt;/strong&gt; linearly separable.
In Python, we can quickly check that using the function &lt;code&gt;ConvexHull&lt;/code&gt; of
&lt;em&gt;Scipy&lt;/em&gt;. Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pylab &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; make_moons, make_blobs
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.spatial &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ConvexHull


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# size of scatter plot point&lt;/span&gt;
    blobs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_blobs(n_samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, centers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, random_state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)
    moons &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_moons(n_samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)

    fig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))
    ax1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;)
    Xb, Yb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blobs
    x1b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Xb[Yb &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    x2b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Xb[Yb &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    ax1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x1b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x2b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticks([])
    ax1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_yticks([])

    ax2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;)
    X, Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; moons
    x1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[Y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[Y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    ax2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x1[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x2[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticks([])
    ax2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_yticks([])

    ax3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;)
    ch1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConvexHull(x1b)			&lt;span style=&#34;color:#75715e&#34;&gt;# Compute the convex hull&lt;/span&gt;
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x1b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x1b[ch1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1b[ch1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;)
    ch2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConvexHull(x2b)
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x2b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2b[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x2b[ch2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2b[ch2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;)
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticks([])
    ax3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_yticks([])

    ax4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;)
    ch1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConvexHull(x1)
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x1[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x1[ch1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x1[ch1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;)
    ch2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConvexHull(x2)
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x2[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;S)
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x2[ch2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], x2[ch2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;)
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticks([])
    ax4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_yticks([])

    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savefig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;convec_hulls.png&amp;#34;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;https://gdetor.github.io/images/convex_hulls.png&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;Figure 1. Blobs and moons data sets along with their convex hulls. The blobs are linear separable since the convex hull of the blue set does not intersect or overlap with the convex hull of the orange data set. On the other hand, the moons data set is not linear separable. &lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;positive-definite-matrix&#34;&gt;Positive definite matrix&lt;/h2&gt;
&lt;p&gt;Check if a given matrix $ \bf{A} $ is positive definite. If all the eigenvalues
of matrix $ \bf{A} $ are positive then the matrix is positive definite.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; print(A)
[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
 [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eigvals(A) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# A is not a positive definite matrix&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
print(A)
[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
 [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
 [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]]

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eigvals(A) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# A is positive definite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;random-matrix-with-predetermined-condition-number&#34;&gt;Random matrix with predetermined condition number&lt;/h2&gt;
&lt;p&gt;You can generate a random matrix with predetermined condition number by
following method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; cond &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; n, m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;normal(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, (m, n))
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; print(A)

[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.24143692&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.61944458&lt;/span&gt;]
 [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.49427012&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.34003024&lt;/span&gt;]
 [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.08271826&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.91021725&lt;/span&gt;]]

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(m, n)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; U, S, V &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;svd(A)

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ((cond &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; cond) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (S[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; S) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (S[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; S[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; SMAT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((m, n), dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;complex) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e-9&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; smat[:k, :k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diag(S)

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; U &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; (SMAT &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; V&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;T)

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Desired condition number: &amp;#34;&lt;/span&gt;, cond)
Desired condition number: &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Actual condition number&amp;#34;&lt;/span&gt;, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cond(B))
Actual condition number: &lt;span style=&#34;color:#ae81ff&#34;&gt;2.9999999999999973&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;integer-operations&#34;&gt;Integer operations&lt;/h2&gt;
&lt;p&gt;Fast integer division by two (rounded down). In this case, we have to
perform a bit shift to the right by $ k $. $ k $ indicates the power of two
$ 2^k $.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# n &amp;gt;&amp;gt; k&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fast integer multiplication with two by left-bit-shift.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# n &amp;lt;&amp;lt; k&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check if an integer $ n $ is even or odd by performing a binary and operation.
If the result of the following operation is 0, then n is even, otherwise is
an odd number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# n &amp;amp; 1&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find the maximum power-of-two that divides an integer $ n $ by
performing an and operation between the integers $ n $ and its additive inverse
$ -n $.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -n &amp;amp; n&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
